kube-prometheus-stack:
  defaultRules:
    rules:
      kubeApiserverAvailability: true
      kubeApiserver: true
      etcd: false
  server:
    resources:
      requests:
        memory: 1000Mi
        cpu: 25m
      limits:
        memory: 2000Mi
  prometheusOperator:
    tlsProxy:
      enabled: false
    createCustomResource: true
  alertmanager:
    alertmanagerSpec:
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      secrets:
        - slackurl
    config:
      global:
        resolve_timeout: 5m
        slack_api_url_file: /etc/alertmanager/secrets/slackurl/slackurl
      route:
        receiver: 'slack'
        group_by: ["alertname", "job"]
      receivers:
      - name: 'slack'
        slack_configs:
        - send_resolved: true
      - name: 'null'
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: 'https://oauth.igou.io/oauth2/start'
        nginx.ingress.kubernetes.io/auth-url: 'https://oauth.igou.io/oauth2/auth'
      ingressClassName: external
      hosts:
      - "alertmanager.igou.io"
      tls:
      - hosts:
        - "alertmanager.igou.io"
        secretName: alertmanager-acme-certificate
  nodeExporter:
    serviceMonitor:
      relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        targetLabel: kubernetes_node
  grafana:
    env:
      DS_PROMETHEUS: "prometheus"
    deploymentStrategy:
      type: Recreate
    persistence:
      enabled: false
    nodeSelector:
      node-role.kubernetes.io/infra: ""
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/infra
      value: reserved
    - effect: NoExecute
      key: node-role.kubernetes.io/infra
      value: reserved
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: 'https://oauth.igou.io/oauth2/start'
        nginx.ingress.kubernetes.io/auth-url: 'https://oauth.igou.io/oauth2/auth'
      ingressClassName: external
      hosts:
      - "grafana.igou.io"
      tls:
      - hosts:
        - "grafana.igou.io"
        secretName: grafana-acme-certificate
    sidecar:
      datasources:
        enabled: true
        defaultDatasourceEnabled: true
      dashboards:
        enabled: true
        searchNamespace: ALL
        provider:
          disableDelete: false
          allowUiUpdates: true
    plugins:
    - natel-discrete-panel
    - pr0ps-trackmap-panel
    - grafana-piechart-panel
    - vonage-status-panel
    - grafana-worldmap-panel
    - grafana-clock-panel
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          allowUiUpdates: true
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        nginx-dashboard:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
          datasource: Prometheus
        bsbmp-exporter-basic:
          url: https://raw.githubusercontent.com/David-Igou/bsbmp-exporter/master/grafana/bsbmp-exporter-basic.json
          datasource: Prometheus
    additionalDataSources:
    - name: loki
      type: loki
      access: proxy
      url: http://logging-loki.logging.svc.cluster.local:3100
    grafana.ini:
      paths:
        data: /var/lib/grafana/data
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: true
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
  kubeEtcd:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubelet:
    serviceMonitor:
      metricRelabelings:
      - action: replace
        sourceLabels:
        - node
        targetLabel: instance
  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/auth-signin: 'https://oauth.igou.io/oauth2/start'
        nginx.ingress.kubernetes.io/auth-url: 'https://oauth.igou.io/oauth2/auth'
      ingressClassName: external
      hosts:
      - "prometheus.igou.io"
      tls:
      - hosts:
        - "prometheus.igou.io"
        secretName: prometheus-acme-certificate
    prometheusSpec:
      ruleSelector: {}
      ruleNamespaceSelector: {}
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      podMonitorNamespaceSelector: {}
      podMonitorSelectorNilUsesHelmValues: false
      nodeSelector:
        node-role.kubernetes.io/infra: ""
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        value: reserved
      - effect: NoExecute
        key: node-role.kubernetes.io/infra
        value: reserved
      retention: 14d
      enableAdminAPI: true
      walCompression: true
      storageSpec: # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
        volumeClaimTemplate:
          spec:
            selector:
              matchLabels:
                app.kubernetes.io/name: prometheus
            resources:
              requests:
                storage: 50Gi
